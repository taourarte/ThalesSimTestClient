package com.goyoung.crypto.util.hsm.host.client;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

public class SimpleSocket2 {

	public static void main(String[] args) throws UnknownHostException, IOException {
		// TODO Auto-generated method stub

		//with SSL
		//SSLSocketFactory f = (SSLSocketFactory) SSLSocketFactory.getDefault();
        //SSLSocket clientSocket = (SSLSocket) f.createSocket("www.bing.com", 443);
        //clientSocket.startHandshake();
       
        //With Plain Text
		Socket clientSocket = new Socket("www.bing.com", 80);
		DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
		DataInputStream in = new DataInputStream(clientSocket.getInputStream());
		
		//char array of Hex byte string
		byte[] peer0_0 = {
				0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 
				0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 
				0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x77, 0x77, 
				0x77, 0x2e, 0x62, 0x69, 0x6e, 0x67, 0x2e, 0x63, 
				0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 
				0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 
				0x6b, 0x65, 0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 
				0x76, 0x65, 0x0d, 0x0a, 0x43, 0x61, 0x63, 0x68, 
				0x65, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 
				0x6c, 0x3a, 0x20, 0x6d, 0x61, 0x78, 0x2d, 0x61, 
				0x67, 0x65, 0x3d, 0x30, 0x0d, 0x0a, 0x41, 0x63, 
				0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x74, 0x65, 
				0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2c, 
				0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 
				0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 
				0x6c, 0x2b, 0x78, 0x6d, 0x6c, 0x2c, 0x61, 0x70, 
				0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 
				0x6e, 0x2f, 0x78, 0x6d, 0x6c, 0x3b, 0x71, 0x3d, 
				0x30, 0x2e, 0x39, 0x2c, 0x69, 0x6d, 0x61, 0x67, 
				0x65, 0x2f, 0x77, 0x65, 0x62, 0x70, 0x2c, 0x2a, 
				0x2f, 0x2a, 0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 
				0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 
				0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 
				0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 
				0x30, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e, 
				0x74, 0x6f, 0x73, 0x68, 0x3b, 0x20, 0x49, 0x6e, 
				0x74, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x20, 
				0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x5f, 
				0x31, 0x30, 0x5f, 0x32, 0x29, 0x20, 0x41, 0x70, 
				0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 
				0x74, 0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 
				0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 
				0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x47, 0x65, 
				0x63, 0x6b, 0x6f, 0x29, 0x20, 0x43, 0x68, 0x72, 
				0x6f, 0x6d, 0x65, 0x2f, 0x34, 0x31, 0x2e, 0x30, 
				0x2e, 0x32, 0x32, 0x37, 0x32, 0x2e, 0x31, 0x31, 
				0x38, 0x20, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 
				0x2f, 0x35, 0x33, 0x37, 0x2e, 0x33, 0x36, 0x0d, 
				0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 
				0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 
				0x3a, 0x20, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x20, 
				0x64, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 
				0x20, 0x73, 0x64, 0x63, 0x68, 0x0d, 0x0a, 0x41, 
				0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 
				0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x20, 
				0x65, 0x6e, 0x2d, 0x55, 0x53, 0x2c, 0x65, 0x6e, 
				0x3b, 0x71, 0x3d, 0x30, 0x2e, 0x38, 0x0d, 0x0a, 
				0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x3a, 0x20, 
				0x4d, 0x55, 0x49, 0x44, 0x3d, 0x30, 0x34, 0x38, 
				0x34, 0x43, 0x36, 0x33, 0x44, 0x43, 0x46, 0x37, 
				0x35, 0x36, 0x38, 0x41, 0x46, 0x32, 0x39, 0x39, 
				0x39, 0x43, 0x31, 0x34, 0x38, 0x43, 0x42, 0x37, 
				0x35, 0x36, 0x42, 0x31, 0x43, 0x3b, 0x20, 0x41, 
				0x4e, 0x4f, 0x4e, 0x3d, 0x41, 0x3d, 0x33, 0x37, 
				0x41, 0x43, 0x41, 0x44, 0x42, 0x32, 0x41, 0x45, 
				0x36, 0x37, 0x34, 0x41, 0x42, 0x37, 0x32, 0x41, 
				0x36, 0x32, 0x46, 0x36, 0x35, 0x34, 0x46, 0x46, 
				0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x26, 0x45, 
				0x3d, 0x31, 0x30, 0x63, 0x32, 0x26, 0x57, 0x3d, 
				0x31, 0x3b, 0x20, 0x4e, 0x41, 0x50, 0x3d, 0x56, 
				0x3d, 0x31, 0x2e, 0x39, 0x26, 0x45, 0x3d, 0x31, 
				0x30, 0x36, 0x38, 0x26, 0x43, 0x3d, 0x4d, 0x78, 
				0x75, 0x4c, 0x46, 0x56, 0x2d, 0x43, 0x54, 0x39, 
				0x38, 0x42, 0x79, 0x70, 0x47, 0x62, 0x51, 0x71, 
				0x79, 0x74, 0x4f, 0x4a, 0x4b, 0x69, 0x44, 0x44, 
				0x76, 0x48, 0x6a, 0x77, 0x31, 0x37, 0x57, 0x57, 
				0x6b, 0x69, 0x39, 0x79, 0x33, 0x42, 0x34, 0x5f, 
				0x7a, 0x4e, 0x49, 0x43, 0x2d, 0x69, 0x4c, 0x53, 
				0x78, 0x36, 0x46, 0x77, 0x26, 0x57, 0x3d, 0x31, 
				0x3b, 0x20, 0x53, 0x52, 0x43, 0x48, 0x55, 0x49, 
				0x44, 0x3d, 0x56, 0x3d, 0x32, 0x26, 0x47, 0x55, 
				0x49, 0x44, 0x3d, 0x31, 0x39, 0x42, 0x36, 0x34, 
				0x31, 0x33, 0x42, 0x33, 0x31, 0x32, 0x37, 0x34, 
				0x41, 0x45, 0x33, 0x42, 0x34, 0x35, 0x36, 0x34, 
				0x43, 0x34, 0x33, 0x42, 0x36, 0x42, 0x36, 0x33, 
				0x42, 0x42, 0x36, 0x3b, 0x20, 0x53, 0x52, 0x43, 
				0x48, 0x55, 0x53, 0x52, 0x3d, 0x41, 0x55, 0x54, 
				0x4f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x3d, 0x30, 
				0x26, 0x47, 0x45, 0x4f, 0x56, 0x41, 0x52, 0x3d, 
				0x26, 0x44, 0x4f, 0x42, 0x3d, 0x32, 0x30, 0x31, 
				0x35, 0x30, 0x34, 0x30, 0x37, 0x3b, 0x20, 0x4d, 
				0x55, 0x49, 0x44, 0x42, 0x3d, 0x30, 0x34, 0x38, 
				0x34, 0x43, 0x36, 0x33, 0x44, 0x43, 0x46, 0x37, 
				0x35, 0x36, 0x38, 0x41, 0x46, 0x32, 0x39, 0x39, 
				0x39, 0x43, 0x31, 0x34, 0x38, 0x43, 0x42, 0x37, 
				0x35, 0x36, 0x42, 0x31, 0x43, 0x3b, 0x20, 0x53, 
				0x52, 0x43, 0x48, 0x48, 0x50, 0x47, 0x55, 0x53, 
				0x52, 0x3d, 0x43, 0x57, 0x3d, 0x31, 0x30, 0x32, 
				0x36, 0x26, 0x43, 0x48, 0x3d, 0x37, 0x33, 0x31, 
				0x26, 0x44, 0x50, 0x52, 0x3d, 0x32, 0x3b, 0x20, 
				0x5f, 0x52, 0x77, 0x42, 0x66, 0x3d, 0x73, 0x3d, 
				0x31, 0x30, 0x26, 0x6f, 0x3d, 0x30, 0x3b, 0x20, 
				0x53, 0x52, 0x43, 0x48, 0x44, 0x3d, 0x44, 0x3d, 
				0x33, 0x38, 0x32, 0x30, 0x35, 0x39, 0x37, 0x26, 
				0x41, 0x46, 0x3d, 0x4e, 0x4f, 0x46, 0x4f, 0x52, 
				0x4d, 0x3b, 0x20, 0x5f, 0x45, 0x44, 0x47, 0x45, 
				0x5f, 0x53, 0x3d, 0x53, 0x49, 0x44, 0x3d, 0x32, 
				0x43, 0x30, 0x44, 0x41, 0x41, 0x45, 0x42, 0x46, 
				0x46, 0x32, 0x45, 0x36, 0x39, 0x31, 0x45, 0x30, 
				0x34, 0x44, 0x36, 0x41, 0x44, 0x36, 0x38, 0x46, 
				0x45, 0x45, 0x45, 0x36, 0x38, 0x43, 0x46, 0x3b, 
				0x20, 0x53, 0x43, 0x52, 0x48, 0x44, 0x4e, 0x3d, 
				0x41, 0x53, 0x44, 0x3d, 0x30, 0x26, 0x44, 0x55, 
				0x52, 0x4c, 0x3d, 0x23, 0x3b, 0x20, 0x5f, 0x53, 
				0x53, 0x3d, 0x53, 0x49, 0x44, 0x3d, 0x35, 0x45, 
				0x44, 0x36, 0x37, 0x35, 0x30, 0x36, 0x42, 0x44, 
				0x41, 0x33, 0x34, 0x35, 0x33, 0x32, 0x42, 0x45, 
				0x34, 0x46, 0x32, 0x32, 0x44, 0x36, 0x38, 0x41, 
				0x46, 0x34, 0x34, 0x37, 0x39, 0x46, 0x26, 0x62, 
				0x49, 0x6d, 0x3d, 0x32, 0x32, 0x3a, 0x37, 0x32, 
				0x35, 0x26, 0x52, 0x3d, 0x31, 0x35, 0x33, 0x3b, 
				0x20, 0x46, 0x42, 0x53, 0x3d, 0x57, 0x54, 0x53, 
				0x3d, 0x31, 0x34, 0x32, 0x38, 0x34, 0x36, 0x31, 
				0x38, 0x39, 0x38, 0x31, 0x36, 0x34, 0x26, 0x43, 
				0x52, 0x3d, 0x2d, 0x31, 0x3b, 0x20, 0x57, 0x4c, 
				0x53, 0x3d, 0x54, 0x53, 0x3d, 0x36, 0x33, 0x35, 
				0x36, 0x34, 0x30, 0x35, 0x38, 0x37, 0x36, 0x33, 
				0x3b, 0x20, 0x5f, 0x48, 0x4f, 0x50, 0x3d, 0x0d, 
				0x0a, 0x0d, 0x0a };
				
		  outToServer.write(peer0_0); // Jam bytes[] into the server

		  byte len1 = in.readByte();
			byte len2 = in.readByte();
			short responseLength = (short) (len1 << 8 | len2);

			byte[] responseBytes = new byte[responseLength];
			for (int i = 0; i < responseLength; i++) {
				responseBytes[i] = in.readByte();
			}

			String response = new String(responseBytes, "UTF-8");//convert byte[] result to printable string
			clientSocket.close();
			
			System.out.println(response);
		  
		  clientSocket.close();
		
		
	}

}
//
